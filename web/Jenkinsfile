pipeline {
		agent any
		
		stages{
				stage('Checkout Code'){
					steps{
							checkout scm
					}
				}
				stage('Build'){
					steps{
							bat "cd web && mvn clean install -Dmaven.test.skip=true"
					}
				}
				stage('SonarQube analysis') {
				    environment {
				      SCANNER_HOME = tool 'Sonar-scanner'
				    }
				    steps {
				    withSonarQubeEnv(credentialsId: 'sonar-credentialsId', installationName: 'Sonar') {
				         sh '''$SCANNER_HOME/bin/sonar-scanner \
				         -Dsonar.projectKey=projectKey \
				         -Dsonar.projectName=projectName \
				         -Dsonar.sources=src/ \
				         -Dsonar.java.binaries=target/classes/ \
				         -Dsonar.exclusions=src/test/java/****/*.java \
				         -Dsonar.java.libraries=/var/lib/jenkins/.m2/**/*.jar \
				         -Dsonar.projectVersion=${BUILD_NUMBER}-${GIT_COMMIT_SHORT}'''
				       }
				    }
				}
				stage('SQuality Gate') {
				  steps {
				       timeout(time: 1, unit: 'MINUTES') {
				       		waitForQualityGate abortPipeline: true
				       }
				  }
				}		
				
				stage('Archive Artifact'){
					steps{
							archiveArtifacts artifacts:'web/target/*.war'
					}
				}
				stage('deployment'){
					steps{
							bat "cd web && mvn clean install -Dmaven.test.skip=true"
					}
				}
		}
}
		